// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ZnajdzLekarza.DBO;

namespace ZnajdzLekarza.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 64)
                .HasAnnotation("ProductVersion", "5.0.8");

            modelBuilder.Entity("LocalizationSpecialist", b =>
                {
                    b.Property<int>("LocalizationsID")
                        .HasColumnType("int");

                    b.Property<int>("SpecialistsID")
                        .HasColumnType("int");

                    b.HasKey("LocalizationsID", "SpecialistsID");

                    b.HasIndex("SpecialistsID");

                    b.ToTable("LocalizationSpecialist");
                });

            modelBuilder.Entity("ServiceSpecialist", b =>
                {
                    b.Property<int>("ServicesID")
                        .HasColumnType("int");

                    b.Property<int>("SpecialistsID")
                        .HasColumnType("int");

                    b.HasKey("ServicesID", "SpecialistsID");

                    b.HasIndex("SpecialistsID");

                    b.ToTable("ServiceSpecialist");
                });

            modelBuilder.Entity("SpecialistSpecialization", b =>
                {
                    b.Property<int>("SpecialistsID")
                        .HasColumnType("int");

                    b.Property<int>("SpecializationsID")
                        .HasColumnType("int");

                    b.HasKey("SpecialistsID", "SpecializationsID");

                    b.HasIndex("SpecializationsID");

                    b.ToTable("SpecialistSpecialization");
                });

            modelBuilder.Entity("ZnajdzLekarza.DBO.Localization", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("StreetName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("StreetNumber")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)");

                    b.Property<string>("ZipCode")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("varchar(5)");

                    b.HasKey("ID");

                    b.ToTable("Localizations");
                });

            modelBuilder.Entity("ZnajdzLekarza.DBO.PaymentMethod", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.HasKey("ID");

                    b.ToTable("PaymentMethods");
                });

            modelBuilder.Entity("ZnajdzLekarza.DBO.Service", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("varchar(250)");

                    b.HasKey("ID");

                    b.ToTable("Services");
                });

            modelBuilder.Entity("ZnajdzLekarza.DBO.Specialist", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasMaxLength(250)
                        .HasColumnType("varchar(250)");

                    b.Property<string>("Education")
                        .HasMaxLength(250)
                        .HasColumnType("varchar(250)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.HasKey("ID");

                    b.ToTable("Specialists");
                });

            modelBuilder.Entity("ZnajdzLekarza.DBO.Specialization", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.HasKey("ID");

                    b.ToTable("Specializations");
                });

            modelBuilder.Entity("ZnajdzLekarza.DBO.Visit", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime");

                    b.Property<int>("LocalizationID")
                        .HasColumnType("int");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<int>("ServiceID")
                        .HasColumnType("int");

                    b.Property<int>("SpecialistID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("LocalizationID");

                    b.HasIndex("ServiceID");

                    b.HasIndex("SpecialistID");

                    b.ToTable("Visits");
                });

            modelBuilder.Entity("LocalizationSpecialist", b =>
                {
                    b.HasOne("ZnajdzLekarza.DBO.Localization", null)
                        .WithMany()
                        .HasForeignKey("LocalizationsID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ZnajdzLekarza.DBO.Specialist", null)
                        .WithMany()
                        .HasForeignKey("SpecialistsID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ServiceSpecialist", b =>
                {
                    b.HasOne("ZnajdzLekarza.DBO.Service", null)
                        .WithMany()
                        .HasForeignKey("ServicesID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ZnajdzLekarza.DBO.Specialist", null)
                        .WithMany()
                        .HasForeignKey("SpecialistsID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SpecialistSpecialization", b =>
                {
                    b.HasOne("ZnajdzLekarza.DBO.Specialist", null)
                        .WithMany()
                        .HasForeignKey("SpecialistsID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ZnajdzLekarza.DBO.Specialization", null)
                        .WithMany()
                        .HasForeignKey("SpecializationsID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ZnajdzLekarza.DBO.Visit", b =>
                {
                    b.HasOne("ZnajdzLekarza.DBO.Localization", "Localization")
                        .WithMany("Visits")
                        .HasForeignKey("LocalizationID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ZnajdzLekarza.DBO.Service", "Service")
                        .WithMany("Visits")
                        .HasForeignKey("ServiceID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ZnajdzLekarza.DBO.Specialist", "Specialist")
                        .WithMany("Visits")
                        .HasForeignKey("SpecialistID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Localization");

                    b.Navigation("Service");

                    b.Navigation("Specialist");
                });

            modelBuilder.Entity("ZnajdzLekarza.DBO.Localization", b =>
                {
                    b.Navigation("Visits");
                });

            modelBuilder.Entity("ZnajdzLekarza.DBO.Service", b =>
                {
                    b.Navigation("Visits");
                });

            modelBuilder.Entity("ZnajdzLekarza.DBO.Specialist", b =>
                {
                    b.Navigation("Visits");
                });
#pragma warning restore 612, 618
        }
    }
}
